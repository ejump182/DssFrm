// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  //provider = "prisma-dbml-generator"
}

model Person {
  id            String      @id @default(cuid())
  userId        String
  email         String
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  responses     Response[]
  attributes    Json        @default("{}")
  events        Event[]
}

model Response {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @updatedAt @map(name: "updated_at")
  finished       Boolean  @default(false)
  survey         Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId       String
  person         Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId       String
  data           Json     @default("{}")
  meta           Json     @default("{}")
  userAttributes Json     @default("{}")
  tags           String[]
}

model Survey {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  name          String
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  questions     Json        @default("[]")
  audience      Json        @default("{}")
  responses     Response[]
}

model Event {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  person        Person      @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId      String
  eventType     EventClass? @relation(fields: [eventClassId], references: [id])
  eventClassId  String?
  properties    Json        @default("{}")
}

enum EventType {
  code
  noCode
}

model EventClass {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")
  name         String
  type         EventType
  events       Event[]
  noCodeConfig Json?
}

enum EnvironmentType {
  production
  development
}

model Environment {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now()) @map(name: "created_at")
  updatedAt DateTime        @updatedAt @map(name: "updated_at")
  type      EnvironmentType
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  surveys   Survey[]
  people    Person[]
  team      Team?           @relation(fields: [teamId], references: [id])
  teamId    String?
  event     Event[]
}

model Product {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @updatedAt @map(name: "updated_at")
  name         String
  team         Team          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId       String
  environments Environment[]
  brandColor   String        @default("#000000")
}

enum Plan {
  free
  pro
}

model Team {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now()) @map(name: "created_at")
  updatedAt        DateTime      @updatedAt @map(name: "updated_at")
  name             String
  members          Membership[]
  products         Product[]
  plan             Plan          @default(free)
  stripeCustomerId String?
  environments     Environment[]
}

enum MembershipRole {
  owner
  admin
  editor
  developer
  viewer
}

model Membership {
  team     Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  accepted Boolean        @default(false)
  role     MembershipRole

  @@id([userId, teamId])
}

model ApiKey {
  id         String    @id @unique @default(cuid())
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  label      String?
  hashedKey  String    @unique()
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

enum IdentityProvider {
  email
  github
}

model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.Text
  refresh_token     String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model User {
  id                        String           @id @default(cuid())
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  name                      String?
  email                     String           @unique
  emailVerified             DateTime?        @map(name: "email_verified")
  password                  String?
  identityProvider          IdentityProvider @default(email)
  identityProviderAccountId String?
  memberships               Membership[]
  accounts                  Account[]
  apiKeys                   ApiKey[]
  groupId                   String?
}
